/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options {
	JDK_VERSION = "1.5";

	static = false;
}

PARSER_BEGIN(ATCollectionParser)
package com.gpl.rpg.AndorsTrail.scripting.collectionparser;


import java.io.Reader;

import java.util.Map;
import java.util.HashMap;

import com.gpl.rpg.AndorsTrail.scripting.Script;
import com.gpl.rpg.AndorsTrail.scripting.ScriptTrigger;

import com.gpl.rpg.AndorsTrail.scripting.interpreter.ATScriptParser;
import com.gpl.rpg.AndorsTrail.scripting.interpreter.ATSNode;
import com.gpl.rpg.AndorsTrail.scripting.interpreter.ATSReturnStatement;
import com.gpl.rpg.AndorsTrail.scripting.interpreter.ATSConstantReference;

public class ATCollectionParser {
	public static Map < String, Script > parseCollection(Reader scriptCollectionReader) throws ParseException {
		Map < String, Script > scripts = new HashMap < String, Script > ();
		ATCollectionParser parser = new ATCollectionParser(scriptCollectionReader);
		try {
			parser.optionalWhiteSpacePrefix(scripts);
		} catch (Exception e) {
			e.printStackTrace();
		} catch (Error e) {
			e.printStackTrace();
		}
		return scripts;
	}
}

PARSER_END(ATCollectionParser)

TOKEN : {
	< DQUO : "\"" >
|	< DOT : "." >
|	< LBRAC : "[" > : SCRIPT_CODE
|	< MAP : "map" >
|	< ON_ENTER : "onEnter" >
|	< ON_LEAVE : "onLeave" >
|	< ATTACK : "attack" >
|	< ON_HIT : "onHit" >
|	< ON_MISS : "onMiss" >
|	< PLAYER : "player" >
|	< STATS_UPDATED : "statsUpdated" >
|	< SCRIPT_ID : [ "a"-"z", "A"-"Z" ] ([ "a"-"z", "A"-"Z", "0"-"9", "_", "-" ])* >
|	< WHITESPACE : [" ","\r","\t","\n"] >
}

< SCRIPT_CODE >
TOKEN : {
	< RBRAC : "]" > : DEFAULT
|	< CODE : (~[ "]" ])+ >
}

void optionalWhiteSpacePrefix(Map < String, Script > scripts) throws com.gpl.rpg.AndorsTrail.scripting.interpreter.ParseException : {
	Script s;
} {
	(<WHITESPACE>)* scriptCollection(scripts)
}

void scriptCollection(Map < String, Script > scripts) throws com.gpl.rpg.AndorsTrail.scripting.interpreter.ParseException : {
	Script s;
} {
	s = script() (scriptCollection(scripts))
	{
		scripts.put(s.id, s);
	}
|	< EOF >
}

Script script() throws com.gpl.rpg.AndorsTrail.scripting.interpreter.ParseException : {
	Token id;
	Token code = null;
	Token desc = null;
	ScriptTrigger trigger;
} {
	< DQUO > id = < SCRIPT_ID > < DQUO > (<WHITESPACE>)* trigger = trigger() (<WHITESPACE>)* < LBRAC > (code = < CODE >)? < RBRAC > (<WHITESPACE>)* (( < LBRAC > ( desc = <CODE>) ? <RBRAC> ) (<WHITESPACE>)* )?
	{
		String description = desc == null ? null : desc.image;
		if (code != null) {
			Map<String, Object> localVarsRefHelp = new HashMap<String, Object>();
			localVarsRefHelp.put(ATScriptParser.LOCALINT_COUNT_KEY, new Integer(0));
			localVarsRefHelp.put(ATScriptParser.LOCALBOOL_COUNT_KEY, new Integer(0));
			localVarsRefHelp.put(ATScriptParser.LOCALSTRING_COUNT_KEY, new Integer(0));
			localVarsRefHelp.put(ATScriptParser.LOCALINT_SCOPECOUNT_KEY, new Integer(0));
			localVarsRefHelp.put(ATScriptParser.LOCALBOOL_SCOPECOUNT_KEY, new Integer(0));
			localVarsRefHelp.put(ATScriptParser.LOCALSTRING_SCOPECOUNT_KEY, new Integer(0));
			ATSNode scriptASTRoot = ATScriptParser.parseScript(code.image, localVarsRefHelp);
			return new Script(id.image, description, trigger, scriptASTRoot, (Integer)localVarsRefHelp.get(ATScriptParser.LOCALINT_SCOPECOUNT_KEY), (Integer)localVarsRefHelp.get(ATScriptParser.LOCALBOOL_SCOPECOUNT_KEY), (Integer)localVarsRefHelp.get(ATScriptParser.LOCALSTRING_SCOPECOUNT_KEY));
		} else {
			//Dummy script returning 0;
			ATSNode scriptASTRoot = new ATSReturnStatement(new ATSConstantReference(0));
			return new Script(id.image, description, trigger, scriptASTRoot, 0, 0, 0);		}
	}
}

ScriptTrigger trigger() : {
	Token category;
	String event;
} {
	category = < MAP > < DOT > event = mapEvents()
	{
		return new ScriptTrigger(category.image, event);
	}
|	category = < ATTACK > < DOT > event = attackEvents()
	{
		return new ScriptTrigger(category.image, event);
	}
|	category = < PLAYER > < DOT > event = playerEvents()
	{
		return new ScriptTrigger(category.image, event);
	}
}

String mapEvents() : {
	Token event;
} {
	event = < ON_ENTER >
	{
		return event.image;
	}
|	event = < ON_LEAVE >
	{
		return event.image;
	}
}

String attackEvents() : {
	Token event;
} {
	event = < ON_HIT >
	{
		return event.image;
	}
|	event = < ON_MISS >
	{
		return event.image;
	}
}

String playerEvents() : {
	Token event;
} {
	event = < STATS_UPDATED >
	{
		return event.image;
	}
}