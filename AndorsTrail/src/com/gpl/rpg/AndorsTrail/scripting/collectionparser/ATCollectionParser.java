/* Generated By:JavaCC: Do not edit this line. ATCollectionParser.java */
package com.gpl.rpg.AndorsTrail.scripting.collectionparser;

import java.io.BufferedReader;
import java.io.StringReader;

import java.util.Map;
import java.util.HashMap;

import com.gpl.rpg.AndorsTrail.scripting.Script;
import com.gpl.rpg.AndorsTrail.scripting.ScriptTrigger;

public class ATCollectionParser implements ATCollectionParserConstants {
        public static Map < String, Script > parseCollection(String scriptCollection) throws ParseException {
                StringReader reader = new StringReader(scriptCollection);
                BufferedReader scriptCollectionReader = new BufferedReader(reader);

                Map < String, Script > scripts = new HashMap < String, Script > ();
                ATCollectionParser parser = new ATCollectionParser(scriptCollectionReader);
                try {
                        parser.scriptCollection(scripts);
                } catch (Exception e) {
                        e.printStackTrace();
                } catch (Error e) {
                        e.printStackTrace();
                }
                return scripts;
        }

  final public void scriptCollection(Map < String, Script > scripts) throws ParseException {
        Script s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DQUO:
      s = script();
      scriptCollection(scripts);
                scripts.put(s.id, s);
      break;
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Script script() throws ParseException {
        Token id;
        Token code = null;
        ScriptTrigger trigger;
    jj_consume_token(DQUO);
    id = jj_consume_token(SCRIPT_ID);
    jj_consume_token(DQUO);
    trigger = trigger();
    jj_consume_token(LBRAC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CODE:
      code = jj_consume_token(CODE);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(RBRAC);
                if (code != null) {
                        {if (true) return new Script(id.image, trigger, code.image);}
                } else {
                        {if (true) return new Script(id.image, trigger, "");}
                }
    throw new Error("Missing return statement in function");
  }

  final public ScriptTrigger trigger() throws ParseException {
        Token category;
        String event;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAP:
      category = jj_consume_token(MAP);
      jj_consume_token(DOT);
      event = mapEvents();
                {if (true) return new ScriptTrigger(category.image, event);}
      break;
    case ATTACK:
      category = jj_consume_token(ATTACK);
      jj_consume_token(DOT);
      event = attackEvents();
                {if (true) return new ScriptTrigger(category.image, event);}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String mapEvents() throws ParseException {
        Token event;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ON_ENTER:
      event = jj_consume_token(ON_ENTER);
                {if (true) return event.image;}
      break;
    case ON_LEAVE:
      event = jj_consume_token(ON_LEAVE);
                {if (true) return event.image;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String attackEvents() throws ParseException {
        Token event;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ON_HIT:
      event = jj_consume_token(ON_HIT);
                {if (true) return event.image;}
      break;
    case ON_MISS:
      event = jj_consume_token(ON_MISS);
                {if (true) return event.image;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ATCollectionParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x21,0x10000,0x900,0x600,0x3000,};
   }

  /** Constructor with InputStream. */
  public ATCollectionParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ATCollectionParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ATCollectionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ATCollectionParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ATCollectionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ATCollectionParser(ATCollectionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ATCollectionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[17];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 17; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
