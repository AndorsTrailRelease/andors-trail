/* Generated By:JavaCC: Do not edit this line. ATScriptParser.java */
package com.gpl.rpg.AndorsTrail.scripting.interpreter;

import java.io.BufferedReader;
import java.io.StringReader;

import java.util.Map;
import java.util.List;
import java.util.ArrayList;

public class ATScriptParser implements ATScriptParserConstants {

        public static final String LOCALINT_COUNT_KEY = "localIntCount";
        public static final String LOCALBOOL_COUNT_KEY = "localBoolCount";
        public static final String LOCALSTRING_COUNT_KEY = "localStringCount";
        public static final String LOCALINT_SCOPECOUNT_KEY = "localIntScopeCount";
        public static final String LOCALBOOL_SCOPECOUNT_KEY = "localBoolScopeCount";
        public static final String LOCALSTRING_SCOPECOUNT_KEY = "localStringScopeCount";
        public static final String LOCALVAR_TYPE_KEY_SUFFIX = "__localVarType";
        public static final String LOCALVAR_INDEX_KEY_SUFFIX = "__localVarIndex";

        public static ATSNode parseScript(String script, Map<String, Object> localVarRefHelp) throws ParseException {
                StringReader reader = new StringReader(script);
                BufferedReader scriptReader = new BufferedReader(reader);
                ATScriptParser parser = new ATScriptParser(scriptReader);
                try {
                        return parser.parseScope(localVarRefHelp);
                } catch (Exception e) {
                        e.printStackTrace();
                } catch (Error e) {
                        e.printStackTrace();
                }
                return null;
        }

  final public ATSExpression parseScope(Map<String, Object> localVars) throws ParseException {
        ATSExpression scriptRoot;
        int prevScopeInt = (Integer)localVars.get(LOCALINT_COUNT_KEY);
        int prevScopeBool = (Integer)localVars.get(LOCALBOOL_COUNT_KEY);
        int prevScopeString = (Integer)localVars.get(LOCALSTRING_COUNT_KEY);
        List<String> prevScopeLocalVarNames = new ArrayList<String>();
        for (String key : localVars.keySet()) {
                if (key.endsWith(LOCALVAR_TYPE_KEY_SUFFIX)) {
                        prevScopeLocalVarNames.add(key);
                }
        }
    scriptRoot = parseScript(localVars);
                localVars.put(LOCALINT_SCOPECOUNT_KEY, Math.max((Integer)localVars.get(LOCALINT_SCOPECOUNT_KEY),(Integer)localVars.get(LOCALINT_COUNT_KEY)));
                localVars.put(LOCALBOOL_SCOPECOUNT_KEY, Math.max((Integer)localVars.get(LOCALBOOL_SCOPECOUNT_KEY),(Integer)localVars.get(LOCALBOOL_COUNT_KEY)));
                localVars.put(LOCALSTRING_SCOPECOUNT_KEY, Math.max((Integer)localVars.get(LOCALSTRING_SCOPECOUNT_KEY),(Integer)localVars.get(LOCALSTRING_COUNT_KEY)));
                localVars.put(LOCALINT_COUNT_KEY, prevScopeInt);
                localVars.put(LOCALBOOL_COUNT_KEY, prevScopeBool);
                localVars.put(LOCALSTRING_COUNT_KEY, prevScopeString);
                List<String> newLocalVarNames = new ArrayList<String>();
                for (String key : localVars.keySet()) {
                        if (!prevScopeLocalVarNames.contains(key)) {
                                if (key.endsWith(LOCALVAR_TYPE_KEY_SUFFIX)) {
                                        newLocalVarNames.add(key);
                                }
                        }
                }
                for (String key : newLocalVarNames) {
                        localVars.remove(key);
                }
                {if (true) return scriptRoot;}
    throw new Error("Missing return statement in function");
  }

  final public ATSExpression parseScript(Map<String, Object> localVars) throws ParseException {
        ATSExpression scriptRoot, next;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case RETURN:
    case MAP:
    case WORLD:
    case ATTACK:
    case PLAYER:
    case ACTOR:
    case BOOL:
    case NUM:
    case STRING:
    case IDENTIFIER:
      scriptRoot = construct(localVars);
      next = parseScript(localVars);
                scriptRoot.next = next;
                {if (true) return scriptRoot;}
      break;
    case 0:
      jj_consume_token(0);
                {if (true) return null;}
      break;
    case RBRAC:
      jj_consume_token(RBRAC);
                {if (true) return null;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ATSExpression construct(Map<String, Object> localVars) throws ParseException {
        ATSExpression construct;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAP:
    case WORLD:
    case ATTACK:
    case PLAYER:
    case ACTOR:
    case BOOL:
    case NUM:
    case STRING:
    case IDENTIFIER:
      construct = associationOrMethodCall(localVars);
                {if (true) return construct;}
      break;
    case IF:
      construct = ifElseConstruct(localVars);
                {if (true) return construct;}
      break;
    case WHILE:
      construct = whileConstruct(localVars);
                {if (true) return construct;}
      break;
    case RETURN:
      construct = returnConstruct(localVars);
                {if (true) return construct;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ATSExpression associationOrMethodCall(Map<String, Object> localVars) throws ParseException {
        ATSValueReference assignee;
        ATSValueReference value = null;
    assignee = reference(localVars);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      jj_consume_token(EQUALS);
      value = value(localVars);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(SCOL);
                if (value != null) {
                        {if (true) return new ATSAssociation(assignee, value);}
                } else {
                        //Method call...
                        {if (true) return assignee;}
                }
    throw new Error("Missing return statement in function");
  }

  final public ATSValueReference reference(Map<String, Object> localVars) throws ParseException {
        ATSValueReference assignee;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOL:
    case NUM:
    case STRING:
      assignee = localVarDeclaration(localVars);
                {if (true) return assignee;}
      break;
    case MAP:
    case WORLD:
    case ATTACK:
    case PLAYER:
    case ACTOR:
    case IDENTIFIER:
      assignee = contextVarReference(localVars);
                {if (true) return assignee;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ATSValueReference localVarDeclaration(Map<String, Object> localVars) throws ParseException {
        Token id;
        int index;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOL:
      jj_consume_token(BOOL);
      id = jj_consume_token(IDENTIFIER);
                if (localVars.get(id.image)!=null) {
                        {if (true) throw new ParseException("ATScript : Duplicate variable "+id.image+" at line "+id.beginLine+" column "+id.beginColumn);}
                }
                index = (Integer)localVars.get(LOCALBOOL_COUNT_KEY);
                localVars.put(LOCALBOOL_COUNT_KEY, index + 1);
                localVars.put(id.image+LOCALVAR_TYPE_KEY_SUFFIX, ATSLocalVarReference.VarType.bool);
                localVars.put(id.image+LOCALVAR_INDEX_KEY_SUFFIX, index);
                {if (true) return new ATSLocalVarReference(ATSLocalVarReference.VarType.bool, index);}
      break;
    case NUM:
      jj_consume_token(NUM);
      id = jj_consume_token(IDENTIFIER);
                if (localVars.get(id.image)!=null) {
                        {if (true) throw new ParseException("ATScript : Duplicate variable "+id.image+" at line "+id.beginLine+" column "+id.beginColumn);}
                }
                index = (Integer)localVars.get(LOCALINT_COUNT_KEY);
                localVars.put(LOCALINT_COUNT_KEY, index + 1);
                localVars.put(id.image+LOCALVAR_TYPE_KEY_SUFFIX, ATSLocalVarReference.VarType.num);
                localVars.put(id.image+LOCALVAR_INDEX_KEY_SUFFIX, index);
                {if (true) return new ATSLocalVarReference(ATSLocalVarReference.VarType.num, index);}
      break;
    case STRING:
      jj_consume_token(STRING);
      id = jj_consume_token(IDENTIFIER);
                if (localVars.get(id.image)!=null) {
                        {if (true) throw new ParseException("ATScript : Duplicate variable "+id.image+" at line "+id.beginLine+" column "+id.beginColumn);}
                }
                index = (Integer)localVars.get(LOCALSTRING_COUNT_KEY);
                localVars.put(LOCALSTRING_COUNT_KEY, index + 1);
                localVars.put(id.image+LOCALVAR_TYPE_KEY_SUFFIX, ATSLocalVarReference.VarType.string);
                localVars.put(id.image+LOCALVAR_INDEX_KEY_SUFFIX, index);
                {if (true) return new ATSLocalVarReference(ATSLocalVarReference.VarType.string, index);}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ATSValueReference contextVarReference(Map<String, Object> localVars) throws ParseException {
        ATSValueReference reference;
        Token id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAP:
      jj_consume_token(MAP);
      jj_consume_token(DOT);
      reference = mapReference(localVars);
                {if (true) return reference;}
      break;
    case ATTACK:
      jj_consume_token(ATTACK);
      jj_consume_token(DOT);
      reference = attackReference(localVars);
                {if (true) return reference;}
      break;
    case PLAYER:
      jj_consume_token(PLAYER);
      jj_consume_token(DOT);
      reference = playerReference(localVars);
                {if (true) return reference;}
      break;
    case ACTOR:
      jj_consume_token(ACTOR);
      jj_consume_token(DOT);
      reference = actorReference(localVars, new ATSContextObjectReference(ATSContextObjectReference.ContextObject.actor));
                {if (true) return reference;}
      break;
    case WORLD:
      jj_consume_token(WORLD);
      jj_consume_token(DOT);
      reference = worldReference(localVars);
                {if (true) return reference;}
      break;
    case IDENTIFIER:
      id = jj_consume_token(IDENTIFIER);
                if (!localVars.containsKey(id.image+LOCALVAR_TYPE_KEY_SUFFIX)) {
                        {if (true) throw new ParseException("Undeclared variable "+id.image+" at line"+id.beginLine+" column "+id.beginColumn);}
                }
                {if (true) return new ATSLocalVarReference((ATSLocalVarReference.VarType)localVars.get(id.image+LOCALVAR_TYPE_KEY_SUFFIX), (Integer)localVars.get(id.image+LOCALVAR_INDEX_KEY_SUFFIX));}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ATSExpression whileConstruct(Map<String, Object> localVars) throws ParseException {
        ATSExpression block;
        ATSValueReference condition;
    jj_consume_token(WHILE);
    jj_consume_token(LPAR);
    condition = value(localVars);
    jj_consume_token(RPAR);
    jj_consume_token(LBRAC);
    block = parseScope(localVars);
                {if (true) return new ATSWhileLoop(condition, block);}
    throw new Error("Missing return statement in function");
  }

  final public ATSExpression ifElseConstruct(Map<String, Object> localVars) throws ParseException {
        ATSExpression ifBlock, elseBlock=null;
        ATSValueReference ifCondition;
    jj_consume_token(IF);
    jj_consume_token(LPAR);
    ifCondition = value(localVars);
    jj_consume_token(RPAR);
    jj_consume_token(LBRAC);
    ifBlock = parseScope(localVars);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      elseBlock = elseBlock(localVars);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
                {if (true) return new ATSFlowControl(ifCondition,ifBlock,elseBlock);}
    throw new Error("Missing return statement in function");
  }

  final public ATSExpression elseBlock(Map<String, Object> localVars) throws ParseException {
        ATSExpression block;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRAC:
      jj_consume_token(LBRAC);
      block = parseScope(localVars);
                {if (true) return block;}
      break;
    case IF:
      block = ifElseConstruct(localVars);
                {if (true) return block;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ATSExpression returnConstruct(Map<String, Object> localVars) throws ParseException {
        ATSValueReference value;
    jj_consume_token(RETURN);
    value = value(localVars);
                {if (true) return new ATSReturnStatement(value);}
    throw new Error("Missing return statement in function");
  }

  final public ATSValueReference value(Map<String, Object> localVars) throws ParseException {
        ATSValueReference reference;
        ATSPrimitiveOperation operation = null;
        Token tok;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAP:
    case WORLD:
    case ATTACK:
    case PLAYER:
    case ACTOR:
    case BOOL:
    case NUM:
    case STRING:
    case IDENTIFIER:
      reference = reference(localVars);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GOE:
      case LOE:
      case GT:
      case LT:
      case EQ:
      case PLUS:
      case MINUS:
      case MULTIPLY:
      case DIVIDE:
      case AND:
      case OR:
        operation = valueOp(localVars, reference);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
                if (operation != null) {
                        {if (true) return operation;}
                } else {
                        {if (true) return reference;}
                }
      break;
    case NUMBER:
      tok = jj_consume_token(NUMBER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GOE:
      case LOE:
      case GT:
      case LT:
      case EQ:
      case PLUS:
      case MINUS:
      case MULTIPLY:
      case DIVIDE:
      case AND:
      case OR:
        operation = valueOp(localVars, new ATSConstantReference(new Double(tok.image)));
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
                if (operation != null) {
                        {if (true) return operation;}
                } else {
                        {if (true) return new ATSConstantReference(new Double(tok.image));}
                }
      break;
    case LPAR:
      jj_consume_token(LPAR);
      reference = value(localVars);
      jj_consume_token(RPAR);
                {if (true) return reference;}
      break;
    case EXCLAM:
      jj_consume_token(EXCLAM);
      reference = value(localVars);
                {if (true) return new ATSPrimitiveOperation(ATSPrimitiveOperation.Operator.not, null, reference);}
      break;
    case TRUE:
      jj_consume_token(TRUE);
                {if (true) return new ATSConstantReference(Boolean.TRUE);}
      break;
    case FALSE:
      jj_consume_token(FALSE);
                {if (true) return new ATSConstantReference(Boolean.FALSE);}
      break;
    case DQUO:
      jj_consume_token(DQUO);
      tok = jj_consume_token(LITERAL_VALUE);
      jj_consume_token(DQUOBIS);
                {if (true) return new ATSConstantReference(tok.image);}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ATSPrimitiveOperation valueOp(Map<String, Object> localVars, ATSValueReference leftHand) throws ParseException {
        ATSValueReference value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GT:
      jj_consume_token(GT);
      value = value(localVars);
                {if (true) return new ATSPrimitiveOperation(ATSPrimitiveOperation.Operator.gt, leftHand, value);}
      break;
    case LT:
      jj_consume_token(LT);
      value = value(localVars);
                {if (true) return new ATSPrimitiveOperation(ATSPrimitiveOperation.Operator.lt, leftHand, value);}
      break;
    case GOE:
      jj_consume_token(GOE);
      value = value(localVars);
                {if (true) return new ATSPrimitiveOperation(ATSPrimitiveOperation.Operator.goe, leftHand, value);}
      break;
    case LOE:
      jj_consume_token(LOE);
      value = value(localVars);
                {if (true) return new ATSPrimitiveOperation(ATSPrimitiveOperation.Operator.loe, leftHand, value);}
      break;
    case EQ:
      jj_consume_token(EQ);
      value = value(localVars);
                {if (true) return new ATSPrimitiveOperation(ATSPrimitiveOperation.Operator.eq, leftHand, value);}
      break;
    case PLUS:
      jj_consume_token(PLUS);
      value = value(localVars);
                {if (true) return new ATSPrimitiveOperation(ATSPrimitiveOperation.Operator.plus, leftHand, value);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      value = value(localVars);
                {if (true) return new ATSPrimitiveOperation(ATSPrimitiveOperation.Operator.minus, leftHand, value);}
      break;
    case MULTIPLY:
      jj_consume_token(MULTIPLY);
      value = value(localVars);
                {if (true) return new ATSPrimitiveOperation(ATSPrimitiveOperation.Operator.multiply, leftHand, value);}
      break;
    case DIVIDE:
      jj_consume_token(DIVIDE);
      value = value(localVars);
                {if (true) return new ATSPrimitiveOperation(ATSPrimitiveOperation.Operator.divide, leftHand, value);}
      break;
    case AND:
      jj_consume_token(AND);
      value = value(localVars);
                {if (true) return new ATSPrimitiveOperation(ATSPrimitiveOperation.Operator.and, leftHand, value);}
      break;
    case OR:
      jj_consume_token(OR);
      value = value(localVars);
                {if (true) return new ATSPrimitiveOperation(ATSPrimitiveOperation.Operator.or, leftHand, value);}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ATSValueReference mapReference(Map<String, Object> localVars) throws ParseException {
    jj_consume_token(OUTDOOR);
                {if (true) return new ATSObjectFieldReference(ATSObjectFieldReference.ObjectFields.mapOutdoor, null);}
    throw new Error("Missing return statement in function");
  }

  final public ATSValueReference attackReference(Map<String, Object> localVars) throws ParseException {
                {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public ATSValueReference playerReference(Map<String, Object> localVars) throws ParseException {
        ATSValueReference ref;
    ref = actorReference(localVars, new ATSContextObjectReference(ATSContextObjectReference.ContextObject.player));
                {if (true) return ref;}
    throw new Error("Missing return statement in function");
  }

  final public ATSValueReference actorReference(Map<String, Object> localVars, ATSContextObjectReference targetInstance) throws ParseException {
        ATSValueReference condId, condMagnitude, condDuration, condChance;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AC:
      jj_consume_token(AC);
                {if (true) return new ATSObjectFieldReference(ATSObjectFieldReference.ObjectFields.actorAc, targetInstance);}
      break;
    case BC:
      jj_consume_token(BC);
                {if (true) return new ATSObjectFieldReference(ATSObjectFieldReference.ObjectFields.actorBc, targetInstance);}
      break;
    case ADDCONDITION:
      jj_consume_token(ADDCONDITION);
      jj_consume_token(LPAR);
      condId = value(localVars);
      jj_consume_token(COMA);
      condMagnitude = value(localVars);
      jj_consume_token(COMA);
      condDuration = value(localVars);
      jj_consume_token(COMA);
      condChance = value(localVars);
      jj_consume_token(RPAR);
                {if (true) return new ATSMethodCall(ATSMethodCall.ObjectMethod.actorAddCondition, new ATSValueReference[]{condId, condMagnitude, condDuration, condChance}, targetInstance);}
      break;
    case CLEARCONDITION:
      jj_consume_token(CLEARCONDITION);
      jj_consume_token(LPAR);
      condId = value(localVars);
      jj_consume_token(COMA);
      condChance = value(localVars);
      jj_consume_token(RPAR);
                {if (true) return new ATSMethodCall(ATSMethodCall.ObjectMethod.actorClearCondition, new ATSValueReference[]{condId, condChance}, targetInstance);}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ATSValueReference worldReference(Map<String, Object> localVars) throws ParseException {
                {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ATScriptParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xd201,0xd000,0x40000000,0x0,0x0,0x0,0x2000,0x1100,0x3ff80000,0x3ff80000,0x80070040,0x3ff80000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x780003e,0x780003e,0x0,0x780003e,0x3800000,0x400003e,0x0,0x0,0x0,0x0,0x780003f,0x0,0xa6000,};
   }

  /** Constructor with InputStream. */
  public ATScriptParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ATScriptParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ATScriptParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ATScriptParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ATScriptParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ATScriptParser(ATScriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ATScriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[62];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 62; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
