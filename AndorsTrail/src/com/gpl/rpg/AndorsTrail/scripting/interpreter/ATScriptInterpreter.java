/* Generated By:JavaCC: Do not edit this line. ATScriptInterpreter.java */
package com.gpl.rpg.AndorsTrail.scripting.interpreter;

import java.io.BufferedReader;
import java.io.StringReader;

import java.util.Map;

import java.lang.reflect.Field;

import com.gpl.rpg.AndorsTrail.context.WorldContext;
import com.gpl.rpg.AndorsTrail.model.actor.Actor;
import com.gpl.rpg.AndorsTrail.model.actor.Player;
import com.gpl.rpg.AndorsTrail.model.map.PredefinedMap;

public class ATScriptInterpreter implements ATScriptInterpreterConstants {
        public static void runScript(String script, Map < String, Object > context) throws ParseException {
                StringReader reader = new StringReader(script);
                BufferedReader scriptReader = new BufferedReader(reader);
                ATScriptInterpreter interpreter = new ATScriptInterpreter(scriptReader);
                try {
                        interpreter.runScript(context);
                } catch (Exception e) {
                        e.printStackTrace();
                } catch (Error e) {
                        e.printStackTrace();
                }
        }

  final public void runScript(Map<String, Object> context) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case MAP:
    case WORLD:
    case ATTACK:
    case PLAYER:
    case ACTOR:
    case BOOL:
    case NUM:
    case IDENTIFIER:
      construct(context);
      runScript(context);
      break;
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void construct(Map<String, Object> context) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAP:
    case WORLD:
    case ATTACK:
    case PLAYER:
    case ACTOR:
    case BOOL:
    case NUM:
    case IDENTIFIER:
      association(context);
      break;
    case IF:
      ifElseConstruct(context);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void association(Map<String, Object> context) throws ParseException {
        ValueReference assignee;
        Object value;
    assignee = reference(context);
    jj_consume_token(EQUALS);
    value = value(context);
    jj_consume_token(SCOL);
                assignee.set(value);
  }

  final public ValueReference reference(Map<String, Object> context) throws ParseException {
        ValueReference assignee;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOL:
    case NUM:
      assignee = localVarDeclaration(context);
                {if (true) return assignee;}
      break;
    case MAP:
    case WORLD:
    case ATTACK:
    case PLAYER:
    case ACTOR:
    case IDENTIFIER:
      assignee = contextVarReference(context);
                {if (true) return assignee;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ValueReference localVarDeclaration(Map<String, Object> context) throws ParseException {
        Token id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOL:
      jj_consume_token(BOOL);
      id = jj_consume_token(IDENTIFIER);
                {if (true) return new LocalVariable(context, "localvar_"+id.image);}
      break;
    case NUM:
      jj_consume_token(NUM);
      id = jj_consume_token(IDENTIFIER);
                {if (true) return new LocalVariable(context, "localvar_"+id.image);}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ValueReference contextVarReference(Map<String, Object> context) throws ParseException {
        ValueReference reference;
        Token id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAP:
      jj_consume_token(MAP);
      jj_consume_token(DOT);
      reference = mapReference(context);
                {if (true) return reference;}
      break;
    case ATTACK:
      jj_consume_token(ATTACK);
      jj_consume_token(DOT);
      reference = attackReference(context);
                {if (true) return reference;}
      break;
    case PLAYER:
      jj_consume_token(PLAYER);
      jj_consume_token(DOT);
      reference = playerReference(context);
                {if (true) return reference;}
      break;
    case ACTOR:
      jj_consume_token(ACTOR);
      jj_consume_token(DOT);
      reference = actorReference(context);
                {if (true) return reference;}
      break;
    case WORLD:
      jj_consume_token(WORLD);
      jj_consume_token(DOT);
      reference = worldReference(context);
                {if (true) return reference;}
      break;
    case IDENTIFIER:
      id = jj_consume_token(IDENTIFIER);
                {if (true) return new LocalVariable(context, "localvar_"+id.image);}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void ifElseConstruct(Map<String, Object> context) throws ParseException {
        String ifBlock, elseBlock=null;
        Object ifCondition;
    jj_consume_token(IF);
    jj_consume_token(LPAR);
    ifCondition = value(context);
    jj_consume_token(RPAR);
    jj_consume_token(LBRAC);
    ifBlock = code();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      jj_consume_token(LBRAC);
      elseBlock = code();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
                if (((Boolean)ifCondition).booleanValue()) {
                        ATScriptInterpreter.runScript(ifBlock, context);
                } else if (elseBlock != null) {
                        ATScriptInterpreter.runScript(elseBlock, context);
                }
  }

  final public String code() throws ParseException {
                Token t = getNextToken();
                StringBuffer sb = new StringBuffer();
                int nestedLevel = 1;
                while (true) {
                        if (t.image.equals("{")) {
                                nestedLevel++;
                        } else if (t.image.equals("}")) {
                                nestedLevel--;
                                if (nestedLevel == 0) break;
                        }
                        sb.append(t.image);
                        t = getNextToken();
                }
                {if (true) return sb.toString();}
    throw new Error("Missing return statement in function");
  }

  final public Object value(Map<String, Object> context) throws ParseException {
        ValueReference reference;
        ValueOperation operation = null;
        Object value;
        Token numeral;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAP:
    case WORLD:
    case ATTACK:
    case PLAYER:
    case ACTOR:
    case BOOL:
    case NUM:
    case IDENTIFIER:
      reference = reference(context);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GOE:
      case LOE:
      case GT:
      case LT:
      case EQ:
      case PLUS:
      case MINUS:
      case MULTIPLY:
      case DIVIDE:
        operation = valueOp(context);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
                if (operation != null) {
                        {if (true) return operation.apply(reference.get());}
                } else {
                        {if (true) return reference.get();}
                }
      break;
    case NUMBER:
      numeral = jj_consume_token(NUMBER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GOE:
      case LOE:
      case GT:
      case LT:
      case EQ:
      case PLUS:
      case MINUS:
      case MULTIPLY:
      case DIVIDE:
        operation = valueOp(context);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
                if (operation != null) {
                        {if (true) return operation.apply(new Double(numeral.image));}
                } else {
                        {if (true) return new Double(numeral.image);}
                }
      break;
    case LPAR:
      jj_consume_token(LPAR);
      value = value(context);
      jj_consume_token(RPAR);
                {if (true) return value;}
      break;
    case EXCLAM:
      jj_consume_token(EXCLAM);
      value = value(context);
                {if (true) return !((Boolean)value);}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ValueOperation valueOp(Map<String, Object> context) throws ParseException {
        Object value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GT:
      jj_consume_token(GT);
      value = value(context);
                {if (true) return new ValueOperation(ValueOperation.Operators.gt, value);}
      break;
    case LT:
      jj_consume_token(LT);
      value = value(context);
                {if (true) return new ValueOperation(ValueOperation.Operators.lt, value);}
      break;
    case GOE:
      jj_consume_token(GOE);
      value = value(context);
                {if (true) return new ValueOperation(ValueOperation.Operators.goe, value);}
      break;
    case LOE:
      jj_consume_token(LOE);
      value = value(context);
                {if (true) return new ValueOperation(ValueOperation.Operators.loe, value);}
      break;
    case EQ:
      jj_consume_token(EQ);
      value = value(context);
                {if (true) return new ValueOperation(ValueOperation.Operators.eq, value);}
      break;
    case PLUS:
      jj_consume_token(PLUS);
      value = value(context);
                {if (true) return new ValueOperation(ValueOperation.Operators.plus, value);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      value = value(context);
                {if (true) return new ValueOperation(ValueOperation.Operators.minus, value);}
      break;
    case MULTIPLY:
      jj_consume_token(MULTIPLY);
      value = value(context);
                {if (true) return new ValueOperation(ValueOperation.Operators.multiply, value);}
      break;
    case DIVIDE:
      jj_consume_token(DIVIDE);
      value = value(context);
                {if (true) return new ValueOperation(ValueOperation.Operators.divide, value);}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ValueReference mapReference(Map<String, Object> context) throws ParseException {
    jj_consume_token(OUTDOOR);
                try {
                        Field f = PredefinedMap.class.getField("isOutdoors");
                        {if (true) return new ObjectField(((PredefinedMap)context.get("map")), f);}
                } catch (NoSuchFieldException e) {
                        e.printStackTrace();
                }
    throw new Error("Missing return statement in function");
  }

  final public ValueReference attackReference(Map<String, Object> context) throws ParseException {
                {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public ValueReference playerReference(Map<String, Object> context) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AC:
      jj_consume_token(AC);
                try {
                        Field f = Actor.class.getField("attackChance");
                        {if (true) return new ObjectField(((WorldContext)context.get("world")).model.player, f);}
                } catch (NoSuchFieldException e) {
                        e.printStackTrace();
                }
      break;
    case BC:
      jj_consume_token(BC);
                try {
                        Field f = Actor.class.getField("blockChance");
                        {if (true) return new ObjectField(((WorldContext)context.get("world")).model.player, f);}
                } catch (NoSuchFieldException e) {
                        e.printStackTrace();
                }
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ValueReference actorReference(Map<String, Object> context) throws ParseException {
                {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public ValueReference worldReference(Map<String, Object> context) throws ParseException {
                {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ATScriptInterpreterTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x7c000801,0x7c000800,0x7c000000,0x0,0x7c000000,0x1000,0x7fc000,0x7fc000,0x7e002040,0x7fc000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1c000,0x1c000,0x1c000,0xc000,0x10000,0x0,0x0,0x0,0x1c000,0x0,0x500,};
   }

  /** Constructor with InputStream. */
  public ATScriptInterpreter(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ATScriptInterpreter(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ATScriptInterpreterTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ATScriptInterpreter(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ATScriptInterpreterTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ATScriptInterpreter(ATScriptInterpreterTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ATScriptInterpreterTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
