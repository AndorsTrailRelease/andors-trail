/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options {  JDK_VERSION = "1.5";  static = false;}PARSER_BEGIN(ATScriptParser)package com.gpl.rpg.AndorsTrail.scripting.interpreter;

import java.io.BufferedReader;
import java.io.StringReader;

public class ATScriptParser {

	public static ATSNode parseScript(String script, ATSLocalVarsHelper localVarRefHelp) throws ParseException {
		StringReader reader = new StringReader(script);
		BufferedReader scriptReader = new BufferedReader(reader);
		ATScriptParser parser = new ATScriptParser(scriptReader);
		try {
			return parser.parseScope(localVarRefHelp);
		} catch (Exception e) {
			e.printStackTrace();
		} catch (Error e) {
			e.printStackTrace();
		}
		return null;
	}}PARSER_END(ATScriptParser)SKIP : {  " "| "\r"| "\t"| "\n"}TOKEN :  {	<DOT : ".">
|	<LPAR : "(">
|	<RPAR : ")">
|	<LBRAC : "{">
|	<RBRAC : "}">
|	<SCOL : ";">
|	<COMA : ",">
|	<IF : "if">
|	<ELSE : "else">
|	<WHILE : "while">
|	<RETURN : "return">
|	<TRUE : "true">
|	<FALSE : "false">
|	<EXCLAM : "!">
|	<GOE : ">=">
|	<LOE : "<=">
|	<GT : ">">
|	<LT : "<">
|	<EQ : "==">
|	<PLUS : "+">
|	<MINUS : "-">
|	<MULTIPLY : "*">
|	<DIVIDE : "/">
|	<CONCAT : "%">
|	<AND : "&&">
|	<OR : "||">
|	<EQUALS : "=">
|	<DQUO : "\""> : LITERAL
|	<NUMBER : (["-"])?(["0"-"9"])+(["."](["0"-"9"])+)?>
|	<MAP : "map">
|	<WORLD : "world">
|	<ATTACK : "attack">
|	<PLAYER : "player">
|	<ACTOR : "actor">
|	<OUTDOOR : "outdoor">
|	<MIN : "min">
|	<MAX : "max">
|	<CURRENT : "current">
|	<SOURCE : "source">
|	<TARGET : "target">
|	<DAMAGE : "damage">
|	<ADDCONDITION : "addActorCondition">
|	<CLEARCONDITION : "clearActorCondition">
|	<HP : "hp">
|	<AP : "ap">
|	<AC : "ac">
|	<AD : "ad">
|	<BC : "bc">
|	<DR : "dr">
|	<CC : "cc">
|	<CM : "cm">
|	<BOOL : "bool">
|	<NUM : "num">
|	<STRING : "string">
|	<IDENTIFIER : ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","-","_"])*>}

<LITERAL>
TOKEN : {
	<ESCAPED_DQUO : "\\\"">
|	<DQUOBIS : "\""> : DEFAULT
|	<LITERAL_VALUE : (~["\"","\\"])+>
}

ATSExpression parseScope(ATSLocalVarsHelper localVars) : {
	ATSExpression scriptRoot;
	localVars.pushScope();
} {
	scriptRoot = parseScript(localVars)
	{
		localVars.popScope();
		return scriptRoot;
	}
}
ATSExpression parseScript(ATSLocalVarsHelper localVars) : {
	ATSExpression scriptRoot, next;
} {
	scriptRoot = construct(localVars) next = parseScript(localVars)
	{
		scriptRoot.next = next;
		return scriptRoot;
	}
|	<EOF>
	{
		return null;
	}
|	<RBRAC>
	{
		return null;
	}
}

ATSExpression construct(ATSLocalVarsHelper localVars) : {
	ATSExpression construct;
} {
	construct = associationOrMethodCall(localVars) 
	{
		return construct;
	}
|	construct = ifElseConstruct(localVars) 
	{
		return construct;
	}
|	construct = whileConstruct(localVars) 
	{
		return construct;
	}
|	construct = returnConstruct(localVars) 
	{
		return construct;
	}
}

ATSExpression associationOrMethodCall(ATSLocalVarsHelper localVars) : {
	ATSValueReference assignee;
	ATSValueReference value = null;
} {
	assignee = reference(localVars) (<EQUALS> value = value(localVars))? <SCOL>
	{
		if (value != null) {
			return new ATSAssociation(assignee, value);
		} else {
			//Method call...
			return assignee;
		}
	} 
}

ATSValueReference reference(ATSLocalVarsHelper localVars) : {
	ATSValueReference assignee;
} {
	assignee = localVarDeclaration(localVars)
	{
		return assignee;
	}
|	assignee = contextVarReference(localVars)
	{
		return assignee;
	}
}

ATSValueReference localVarDeclaration(ATSLocalVarsHelper localVars) : {
	Token id;
	int index;
} {
	<BOOL> id = <IDENTIFIER>
	{
		if (localVars.getLocalVar(id.image)!= null) {
			throw new ParseException("ATScript : Duplicate variable "+id.image+" at line "+id.beginLine+" column "+id.beginColumn);
		}
		return localVars.newBoolVariable(id.image);
	}
|	<NUM> id = <IDENTIFIER>
	{
		if (localVars.getLocalVar(id.image)!= null) {
			throw new ParseException("ATScript : Duplicate variable "+id.image+" at line "+id.beginLine+" column "+id.beginColumn);
		}
		return localVars.newNumVariable(id.image);
	}
|	<STRING> id = <IDENTIFIER>
	{
		if (localVars.getLocalVar(id.image)!=null) {
			throw new ParseException("ATScript : Duplicate variable "+id.image+" at line "+id.beginLine+" column "+id.beginColumn);
		}
		return localVars.newStringVariable(id.image);
	}
}

ATSValueReference contextVarReference(ATSLocalVarsHelper localVars) : {
	ATSValueReference reference;
	Token id;
} {
	<MAP> <DOT> reference = mapReference(localVars)
	{
		return reference;
	}
|	<ATTACK> <DOT> reference = attackReference(localVars)
	{
		return reference;
	}
|	<PLAYER> <DOT> reference = playerReference(localVars)
	{
		return reference;
	}
|	<ACTOR>	<DOT> reference = actorReference(localVars, new ATSContextObjectReference(ATSContextObjectReference.ContextObject.actor))
	{
		return reference;
	}
|	<WORLD>	<DOT> reference = worldReference(localVars)
	{
		return reference;
	}
|	id = <IDENTIFIER>
	{
		ATSLocalVarReference var = localVars.getLocalVar(id.image);
		if (var == null) {
			throw new ParseException("Undeclared variable "+id.image+" at line"+id.beginLine+" column "+id.beginColumn);
		}
		return var;
	}
}

ATSExpression whileConstruct(ATSLocalVarsHelper localVars) : {
	ATSExpression block;
	ATSValueReference condition;
} {
	<WHILE> <LPAR> condition = value(localVars) <RPAR> <LBRAC> block = parseScope(localVars)
	{
		return new ATSWhileLoop(condition, block);
	}
}

ATSExpression ifElseConstruct(ATSLocalVarsHelper localVars) : {
	ATSExpression ifBlock, elseBlock=null;
	ATSValueReference ifCondition;
} {
	<IF> <LPAR> ifCondition = value(localVars) <RPAR> <LBRAC> ifBlock = parseScope(localVars) ( <ELSE> elseBlock = elseBlock(localVars))?
	{
		return new ATSFlowControl(ifCondition,ifBlock,elseBlock);
	}
}

ATSExpression elseBlock(ATSLocalVarsHelper localVars) : {
	ATSExpression block;
} {
	<LBRAC> block = parseScope(localVars)
	{
		return block;
	}
|	block = ifElseConstruct(localVars)
	{
		return block;
	}
}

ATSExpression returnConstruct(ATSLocalVarsHelper localVars) : {
	ATSValueReference value;
} {
	<RETURN> value = value(localVars)
	{
		return new ATSReturnStatement(value);
	}
}

ATSValueReference value(ATSLocalVarsHelper localVars) : {
	ATSValueReference reference;
	ATSPrimitiveOperation operation = null;
	Token tok;
} {
	reference = reference(localVars) (operation = valueOp(localVars, reference)) ?
	{
		if (operation != null) {
			return operation;
		} else {
			return reference;
		}
	}
|	tok = <NUMBER> (operation = valueOp(localVars, new ATSConstantReference(new Double(tok.image)))) ?
	{
		if (operation != null) {
			return operation;
		} else {
			return new ATSConstantReference(new Double(tok.image));
		}
	}
|	<LPAR> reference = value(localVars) <RPAR>
	{
		return reference;
	}
|	<EXCLAM> reference = value(localVars)
	{
		return new ATSPrimitiveOperation(ATSPrimitiveOperation.Operator.not, null, reference);
	}
|	<TRUE>
	{
		return new ATSConstantReference(Boolean.TRUE);
	}
|	<FALSE>
	{
		return new ATSConstantReference(Boolean.FALSE);
	}
|	<DQUO> tok=<LITERAL_VALUE> <DQUOBIS>
	{
		return new ATSConstantReference(tok.image);
	}
}


ATSPrimitiveOperation valueOp(ATSLocalVarsHelper localVars, ATSValueReference leftHand) : {
	ATSValueReference value;
} {
	<GT> value = value(localVars)
	{
		return new ATSPrimitiveOperation(ATSPrimitiveOperation.Operator.gt, leftHand, value);
	}
|	<LT> value = value(localVars)
	{
		return new ATSPrimitiveOperation(ATSPrimitiveOperation.Operator.lt, leftHand, value);
	}
|	<GOE> value = value(localVars)
	{
		return new ATSPrimitiveOperation(ATSPrimitiveOperation.Operator.goe, leftHand, value);
	}
|	<LOE> value = value(localVars)
	{
		return new ATSPrimitiveOperation(ATSPrimitiveOperation.Operator.loe, leftHand, value);
	}
|	<EQ> value = value(localVars)
	{
		return new ATSPrimitiveOperation(ATSPrimitiveOperation.Operator.eq, leftHand, value);
	}
|	<PLUS> value = value(localVars)
	{
		return new ATSPrimitiveOperation(ATSPrimitiveOperation.Operator.plus, leftHand, value);
	}
|	<MINUS> value = value(localVars)
	{
		return new ATSPrimitiveOperation(ATSPrimitiveOperation.Operator.minus, leftHand, value);
	}
|	<MULTIPLY> value = value(localVars)
	{
		return new ATSPrimitiveOperation(ATSPrimitiveOperation.Operator.multiply, leftHand, value);
	}
|	<DIVIDE> value = value(localVars)
	{
		return new ATSPrimitiveOperation(ATSPrimitiveOperation.Operator.divide, leftHand, value);
	}
|	<CONCAT> value = value(localVars)
	{
		return new ATSPrimitiveOperation(ATSPrimitiveOperation.Operator.concat, leftHand, value);
	}
|	<AND> value = value(localVars)
	{
		return new ATSPrimitiveOperation(ATSPrimitiveOperation.Operator.and, leftHand, value);
	}
|	<OR> value = value(localVars)
	{
		return new ATSPrimitiveOperation(ATSPrimitiveOperation.Operator.or, leftHand, value);
	}
}


ATSValueReference mapReference(ATSLocalVarsHelper localVars) : {
} {
	<OUTDOOR>
	{
		return new ATSObjectFieldReference(ATSObjectFieldReference.ObjectFields.mapOutdoor, null);
	}
}

ATSValueReference attackReference(ATSLocalVarsHelper localVars) : {
} {
	{
		return null;
	}
}

ATSValueReference playerReference(ATSLocalVarsHelper localVars) : {
	ATSValueReference ref;
} {
	ref = actorReference(localVars, new ATSContextObjectReference(ATSContextObjectReference.ContextObject.player))
	{
		return ref;
	}
}

ATSValueReference actorReference(ATSLocalVarsHelper localVars, ATSContextObjectReference targetInstance) : {
	ATSValueReference condId, condMagnitude, condDuration, condChance;
} {
	<AC>
	{
		return new ATSObjectFieldReference(ATSObjectFieldReference.ObjectFields.actorAc, targetInstance);
	}
|	<BC>
	{
		return new ATSObjectFieldReference(ATSObjectFieldReference.ObjectFields.actorBc, targetInstance);
	}
|	<ADDCONDITION> <LPAR> condId = value(localVars) <COMA> condMagnitude = value(localVars) <COMA> condDuration = value(localVars) <COMA> condChance = value(localVars) <RPAR>
	{
		return new ATSMethodCall(ATSMethodCall.ObjectMethod.actorAddCondition, new ATSValueReference[]{condId, condMagnitude, condDuration, condChance}, targetInstance);
	}
|	<CLEARCONDITION> <LPAR> condId = value(localVars)  <COMA> condChance = value(localVars) <RPAR>
	{
		return new ATSMethodCall(ATSMethodCall.ObjectMethod.actorClearCondition, new ATSValueReference[]{condId, condChance}, targetInstance);
	}
}

ATSValueReference worldReference(ATSLocalVarsHelper localVars) : {
} {
	{
		return null;
	}
}