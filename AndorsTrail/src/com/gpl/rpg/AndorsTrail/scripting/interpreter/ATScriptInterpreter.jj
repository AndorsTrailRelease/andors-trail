/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options {  JDK_VERSION = "1.5";  static = false;}PARSER_BEGIN(ATScriptInterpreter)package com.gpl.rpg.AndorsTrail.scripting.interpreter;

import java.io.BufferedReader;
import java.io.StringReader;

import java.util.Map;

import java.lang.reflect.Field;

import com.gpl.rpg.AndorsTrail.context.ControllerContext;
import com.gpl.rpg.AndorsTrail.context.WorldContext;
import com.gpl.rpg.AndorsTrail.model.ability.ActorCondition;
import com.gpl.rpg.AndorsTrail.model.ability.ActorConditionEffect;
import com.gpl.rpg.AndorsTrail.model.actor.Actor;
import com.gpl.rpg.AndorsTrail.model.actor.Player;
import com.gpl.rpg.AndorsTrail.model.map.PredefinedMap;
import com.gpl.rpg.AndorsTrail.util.ConstRange;

public class ATScriptInterpreter {

	public static final Field MAP_OUTDOOR_FIELD;
	
	public static final Field ACTOR_ATTACKCHANCE_FIELD;
	public static final Field ACTOR_BLOCKCHANCE_FIELD;

	static {
		try {
			MAP_OUTDOOR_FIELD = PredefinedMap.class.getField("isOutdoors");
		
			ACTOR_ATTACKCHANCE_FIELD = Actor.class.getField("attackChance");
			ACTOR_BLOCKCHANCE_FIELD = Actor.class.getField("blockChance");
		} catch (NoSuchFieldException nsfe) {
			throw new RuntimeException(nsfe);
		}
	}

	public static void runScript(String script, Map < String, Object > context) throws ParseException {		StringReader reader = new StringReader(script);
		BufferedReader scriptReader = new BufferedReader(reader);
		ATScriptInterpreter interpreter = new ATScriptInterpreter(scriptReader);		try {			interpreter.runScript(context);		} catch (Exception e) {			e.printStackTrace();		} catch (Error e) {			e.printStackTrace();		}	}}PARSER_END(ATScriptInterpreter)SKIP : {  " "| "\r"| "\t"| "\n"}TOKEN :  {	<DOT : ".">
|	<LPAR : "(">
|	<RPAR : ")">
|	<LBRAC : "{">
|	<RBRAC : "}">
|	<SCOL : ";">
|	<COMA : ",">
|	<IF : "if">
|	<ELSE : "else">
|	<EXCLAM : "!">
|	<GOE : ">=">
|	<LOE : "<=">
|	<GT : ">">
|	<LT : "<">
|	<EQ : "==">
|	<PLUS : "+">
|	<MINUS : "-">
|	<MULTIPLY : "*">
|	<DIVIDE : "/">
|	<EQUALS : "=">
|	<DQUO : "\""> : LITERAL
|	<NUMBER : (["-"])?(["0"-"9"])+(["."](["0"-"9"])+)?>
|	<MAP : "map">
|	<WORLD : "world">
|	<ATTACK : "attack">
|	<PLAYER : "player">
|	<ACTOR : "actor">
|	<OUTSIDE : "outside">
|	<MIN : "min">
|	<MAX : "max">
|	<CURRENT : "current">
|	<SOURCE : "source">
|	<TARGET : "target">
|	<DAMAGE : "damage">
|	<ADDCONDITION : "addActorCondition">
|	<CLEARCONDITION : "clearActorCondition">
|	<HP : "hp">
|	<AP : "ap">
|	<AC : "ac">
|	<AD : "ad">
|	<BC : "bc">
|	<DR : "dr">
|	<CC : "cc">
|	<CM : "cm">
|	<BOOL : "bool">
|	<NUM : "num">
|	<IDENTIFIER : ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","-","_"])*>}

<LITERAL>
TOKEN : {
	<ESCAPED_DQUO : "\\\"">
|	<DQUOBIS : "\""> : DEFAULT
|	<LITERAL_VALUE : (~["\"","\\"])+>
}
void runScript(Map<String, Object> context) : {
} {
	construct(context) runScript(context)
|	<EOF>
}

void construct(Map<String, Object> context) : {
} {
	associationOrMethodCall(context)
|	ifElseConstruct(context)
}

void associationOrMethodCall(Map<String, Object> context) : {
	ValueReference assignee;
	Object value = null;
} {
	assignee = reference(context) (<EQUALS> value = value(context))? <SCOL>
	{
		if (value != null) {
			assignee.set(value);
		}
	} 
}

ValueReference reference(Map<String, Object> context) : {
	ValueReference assignee;
} {
	assignee = localVarDeclaration(context)
	{
		return assignee;
	}
|	assignee = contextVarReference(context)
	{
		return assignee;
	}
}

ValueReference localVarDeclaration(Map<String, Object> context) : {
	Token id;
} {
	<BOOL> id = <IDENTIFIER>
	{
		return new LocalVariable(context, "localvar_"+id.image);
	}
|	<NUM> id = <IDENTIFIER>
	{
		return new LocalVariable(context, "localvar_"+id.image);
	}
}

ValueReference contextVarReference(Map<String, Object> context) : {
	ValueReference reference;
	Token id;
} {
	<MAP> <DOT> reference = mapReference(context)
	{
		return reference;
	}
|	<ATTACK> <DOT> reference = attackReference(context)
	{
		return reference;
	}
|	<PLAYER> <DOT> reference = playerReference(context)
	{
		return reference;
	}
|	<ACTOR>	<DOT> reference = actorReference(context, ((Actor)context.get("actor")))
	{
		return reference;
	}
|	<WORLD>	<DOT> reference = worldReference(context)
	{
		return reference;
	}
|	id = <IDENTIFIER>
	{
		return new LocalVariable(context, "localvar_"+id.image);
	}
}

void ifElseConstruct(Map<String, Object> context) : {
	String ifBlock, elseBlock=null;
	Object ifCondition;
} {
	<IF> <LPAR> ifCondition = value(context) <RPAR> <LBRAC> ifBlock = code() ( <ELSE> <LBRAC> elseBlock = code())?
	{
		if (((Boolean)ifCondition).booleanValue()) {
			ATScriptInterpreter.runScript(ifBlock, context);
		} else if (elseBlock != null) {
			ATScriptInterpreter.runScript(elseBlock, context);
		}
	}
}

String code() : {
} {
	{
		Token t = getNextToken();
		StringBuffer sb = new StringBuffer();
		int nestedLevel = 1;
		while (true) {
			if (t.image.equals("{")) {
				nestedLevel++;
			} else if (t.image.equals("}")) {
				nestedLevel--;
				if (nestedLevel == 0) break;
			} 
			sb.append(t.image);
			t = getNextToken();
		}
		return sb.toString();
	}
}

Object value(Map<String, Object> context) : {
	ValueReference reference;
	ValueOperation operation = null;
	Object value;
	Token tok;
} {
	reference = reference(context) (operation = valueOp(context)) ?
	{
		if (operation != null) {
			return operation.apply(reference.get());
		} else {
			return reference.get();
		}
	}
|	tok = <NUMBER> (operation = valueOp(context))?
	{
		if (operation != null) {
			return operation.apply(new Double(tok.image));
		} else {
			return new Double(tok.image);
		}
	}
|	<LPAR> value = value(context) <RPAR>
	{
		return value;
	}
|	<EXCLAM> value = value(context)
	{
		return !((Boolean)value);
	}
|	<DQUO> tok=<LITERAL_VALUE> <DQUOBIS>
	{
		return tok.image;
	}
}


ValueOperation valueOp(Map<String, Object> context) : {
	Object value;
} {
	<GT> value = value(context)
	{
		return new ValueOperation(ValueOperation.Operators.gt, value);
	}
|	<LT> value = value(context)
	{
		return new ValueOperation(ValueOperation.Operators.lt, value);
	}
|	<GOE> value = value(context)
	{
		return new ValueOperation(ValueOperation.Operators.goe, value);
	}
|	<LOE> value = value(context)
	{
		return new ValueOperation(ValueOperation.Operators.loe, value);
	}
|	<EQ> value = value(context)
	{
		return new ValueOperation(ValueOperation.Operators.eq, value);
	}
|	<PLUS> value = value(context)
	{
		return new ValueOperation(ValueOperation.Operators.plus, value);
	}
|	<MINUS> value = value(context)
	{
		return new ValueOperation(ValueOperation.Operators.minus, value);
	}
|	<MULTIPLY> value = value(context)
	{
		return new ValueOperation(ValueOperation.Operators.multiply, value);
	}
|	<DIVIDE> value = value(context)
	{
		return new ValueOperation(ValueOperation.Operators.divide, value);
	}
}


ValueReference mapReference(Map<String, Object> context) : {
} {
	<OUTSIDE>
	{
		return new ObjectField(((PredefinedMap)context.get("map")), MAP_OUTDOOR_FIELD);
	}
}

ValueReference attackReference(Map<String, Object> context) : {
} {
	{
		return null;
	}
}

ValueReference playerReference(Map<String, Object> context) : {
	ValueReference ref;
} {
	ref = actorReference(context, ((WorldContext)context.get("world")).model.player)
	{
		return ref;
	}
}

ValueReference actorReference(Map<String, Object> context, Actor target) : {
	Object condId, condMagnitude, condDuration, condChance;
} {
	<AC>
	{
		return new ObjectField(((WorldContext)context.get("world")).model.player, ACTOR_ATTACKCHANCE_FIELD);
	}
|	<BC>
	{
		return new ObjectField(((WorldContext)context.get("world")).model.player, ACTOR_BLOCKCHANCE_FIELD);
	}
|	<ADDCONDITION> <LPAR> condId = value(context) <COMA> condMagnitude = value(context) <COMA> condDuration = value(context) <COMA> condChance = value(context) <RPAR>
	{
		((ControllerContext)context.get("controllers")).actorStatsController.rollForConditionEffect(target, new ActorConditionEffect(((WorldContext)context.get("world")).actorConditionsTypes.getActorConditionType((String)condId), ((Double)condMagnitude).intValue(), ((Double)condDuration).intValue(), new ConstRange(100, ((Double)condChance).intValue()) ));
		return ValueReference.VOID_REFERENCE;
	}
|	<CLEARCONDITION> <LPAR> condId = value(context) <RPAR>
	{
		((ControllerContext)context.get("controllers")).actorStatsController.rollForConditionEffect(target, new ActorConditionEffect(((WorldContext)context.get("world")).actorConditionsTypes.getActorConditionType((String)condId), ActorCondition.MAGNITUDE_REMOVE_ALL, 1, new ConstRange(100, 100) ));
		return ValueReference.VOID_REFERENCE;
	}
}

ValueReference worldReference(Map<String, Object> context) : {
} {
	{
		return null;
	}
}